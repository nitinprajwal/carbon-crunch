name: Code Quality Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint fastapi uvicorn

    - name: Install Node.js dependencies
      run: |
        npm install -g eslint
        npm install -g eslint-plugin-react

    - name: Run Python Analysis
      run: |
        Get-ChildItem -Recurse -Filter "*.py" | 
        ForEach-Object {
          $output = pylint $_.FullName --output-format=json
          $output | Out-File -Append "./pylint_results.json"
        }
      shell: pwsh

    - name: Run JavaScript Analysis
      run: |
        Get-ChildItem -Recurse -Filter "*.js*" | 
        ForEach-Object {
          $output = eslint $_.FullName -f json
          $output | Out-File -Append "./eslint_results.json"
        }
      shell: pwsh

    - name: Upload Analysis Results
      uses: actions/upload-artifact@v4
      with:
        name: code-analysis-results
        path: |
          ./pylint_results.json
          ./eslint_results.json

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## Code Analysis Results\n\n';
          
          if (fs.existsSync('./pylint_results.json')) {
            const pylintResults = JSON.parse(fs.readFileSync('./pylint_results.json', 'utf8'));
            comment += '### Python Analysis\n' + JSON.stringify(pylintResults, null, 2) + '\n\n';
          }
          
          if (fs.existsSync('./eslint_results.json')) {
            const eslintResults = JSON.parse(fs.readFileSync('./eslint_results.json', 'utf8'));
            comment += '### JavaScript Analysis\n' + JSON.stringify(eslintResults, null, 2);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 